import sys
from time import sleep
from typing import Any, Dict, List

from rich.align import Align
from rich.console import Console
from rich.layout import Layout
from rich.live import Live
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

console = Console()


class SortTUI:
    def __init__(self):
        self.algorithms = [
            {"name": "ü´ß Bubble Sort", "id": "bubble", "implemented": True},
            {"name": "üîÑ Selection Sort", "id": "selection", "implemented": False},
            {"name": "üìç Insertion Sort", "id": "insertion", "implemented": False},
            {"name": "üöÄ Quick Sort", "id": "quick", "implemented": False},
            {"name": "üîÄ Merge Sort", "id": "merge", "implemented": False},
        ]

        self.test_cases = [
            {
                "name": "üé≤ Caso Aleat√≥rio",
                "array": [10, 30, 20, 40, 5],
                "description": "Array com elementos em ordem aleat√≥ria",
            },
            {
                "name": "‚úÖ Melhor Caso",
                "array": [1, 2, 3, 4, 5],
                "description": "Array j√° ordenado - m√≠nimo de trocas",
            },
            {
                "name": "‚ùå Pior Caso",
                "array": [50, 40, 30, 20, 10],
                "description": "Array em ordem decrescente - m√°ximo de trocas",
            },
            {
                "name": "üîÑ Caso com Duplicatas",
                "array": [3, 1, 4, 1, 5, 9, 2, 6],
                "description": "Array com elementos repetidos",
            },
        ]

        self.selected_algorithm = 0
        self.selected_test_case = 0
        self.current_step = 0
        self.sort_steps = []
        self.is_running = False

    def create_layout(self):
        """Cria o layout da TUI"""
        layout = Layout()

        # Divide em header e body
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="body"),
            Layout(name="footer", size=3),
        )

        # Divide o body em left e right
        layout["body"].split_row(
            Layout(name="left", ratio=1), Layout(name="right", ratio=2)
        )

        # Divide o left em algorithms e test_cases
        layout["left"].split_column(
            Layout(name="algorithms", ratio=1), Layout(name="test_cases", ratio=1)
        )

        return layout

    def render_header(self):
        """Renderiza o cabe√ßalho"""
        return Panel(
            Align.center(
                Text(
                    "üöÄ RichSort - Visualizador de Algoritmos de Ordena√ß√£o",
                    style="bold cyan",
                )
            ),
            style="blue",
        )

    def render_footer(self):
        """Renderiza o rodap√© com comandos"""
        commands = (
            "[yellow]‚Üë‚Üì[/] Navegar | [yellow]Tab[/] Trocar painel | "
            "[yellow]Enter[/] Executar | [yellow]Space[/] Pausar/Continuar | [yellow]R[/] Reset | [yellow]Q[/] Sair"
        )
        return Panel(Align.center(commands), style="green")

    def render_algorithms_panel(self):
        """Renderiza o painel de algoritmos"""
        table = Table(show_header=False, box=None, padding=(0, 1))

        for i, algo in enumerate(self.algorithms):
            if i == self.selected_algorithm:
                if algo["implemented"]:
                    table.add_row(f"‚ñ∫ [bold cyan]{algo['name']}[/]")
                else:
                    table.add_row(f"‚ñ∫ [bold red]{algo['name']} (Em breve)[/]")
            else:
                if algo["implemented"]:
                    table.add_row(f"  [white]{algo['name']}[/]")
                else:
                    table.add_row(f"  [dim]{algo['name']} (Em breve)[/]")

        return Panel(
            table,
            title="üßÆ Algoritmos",
            border_style="cyan" if self.selected_panel == "algorithms" else "dim",
        )

    def render_test_cases_panel(self):
        """Renderiza o painel de casos de teste"""
        table = Table(show_header=False, box=None, padding=(0, 1))

        for i, test_case in enumerate(self.test_cases):
            if i == self.selected_test_case:
                table.add_row(f"‚ñ∫ [bold yellow]{test_case['name']}[/]")
                table.add_row(f"   [dim]{test_case['description']}[/]")
                table.add_row(f"   [cyan]Array: {test_case['array']}[/]")
            else:
                table.add_row(f"  [white]{test_case['name']}[/]")

        return Panel(
            table,
            title="üìã Casos de Teste",
            border_style="yellow" if self.selected_panel == "test_cases" else "dim",
        )

    def render_main_panel(self):
        """Renderiza o painel principal com a execu√ß√£o do algoritmo"""
        if not self.sort_steps:
            return Panel(
                Align.center(
                    Text(
                        "Pressione Enter para executar o algoritmo selecionado\n\n"
                        f"Algoritmo: {self.algorithms[self.selected_algorithm]['name']}\n"
                        f"Caso de Teste: {self.test_cases[self.selected_test_case]['name']}",
                        style="dim",
                        justify="center",
                    )
                ),
                title="üìä Execu√ß√£o do Algoritmo",
                border_style="magenta",
            )

        # Se temos passos, mostra o passo atual
        if self.current_step < len(self.sort_steps):
            step_data = self.sort_steps[self.current_step]
            content = step_data["content"]
        else:
            content = "Execu√ß√£o conclu√≠da!"

        progress = (
            f"Passo {self.current_step + 1}/{len(self.sort_steps)}"
            if self.sort_steps
            else ""
        )

        return Panel(
            content,
            title=f"üìä Execu√ß√£o do Algoritmo - {progress}",
            border_style="magenta",
        )

    def generate_bubble_sort_steps(
        self, input_array: List[int]
    ) -> List[Dict[str, Any]]:
        """Gera todos os passos do bubble sort para visualiza√ß√£o"""
        steps = []
        array = input_array.copy()
        length = len(array)
        comparisons = 0
        swaps = 0

        # Passo inicial
        steps.append(
            {
                "type": "start",
                "content": self.create_step_content(
                    f"ü´ß BUBBLE SORT\n\n"
                    f"Array inicial: {input_array}\n"
                    f"Tamanho: {length} elementos\n\n"
                    f"O Bubble Sort compara elementos adjacentes e os troca\n"
                    f"se estiverem fora de ordem.",
                    array,
                    -1,
                    -1,
                    comparisons,
                    swaps,
                ),
            }
        )

        # Itera√ß√£o externa
        for step in range(length):
            steps.append(
                {
                    "type": "step_start",
                    "content": self.create_step_content(
                        f"PASSO {step + 1}/{length} - Estado atual",
                        array,
                        -1,
                        -1,
                        comparisons,
                        swaps,
                    ),
                }
            )

            houve_troca_no_passo = False

            # Itera√ß√£o interna
            for index in range(length - step - 1):
                elemento = array[index]
                vizinho = array[index + 1]
                comparisons += 1

                # Mostra compara√ß√£o
                steps.append(
                    {
                        "type": "comparison",
                        "content": self.create_step_content(
                            f"Comparando {elemento} (pos: {index}) com {vizinho} (pos: {index + 1})",
                            array,
                            index,
                            index + 1,
                            comparisons,
                            swaps,
                        ),
                    }
                )

                # Executa troca se necess√°rio
                if elemento > vizinho:
                    array[index], array[index + 1] = array[index + 1], array[index]
                    swaps += 1
                    houve_troca_no_passo = True

                    steps.append(
                        {
                            "type": "swap",
                            "content": self.create_step_content(
                                f"‚úÖ {elemento} > {vizinho} ‚Üí TROCAR!",
                                array,
                                index,
                                index + 1,
                                comparisons,
                                swaps,
                                swapped=True,
                            ),
                        }
                    )
                else:
                    steps.append(
                        {
                            "type": "no_swap",
                            "content": self.create_step_content(
                                f"‚ùå {elemento} ‚â§ {vizinho} ‚Üí n√£o trocar",
                                array,
                                index,
                                index + 1,
                                comparisons,
                                swaps,
                            ),
                        }
                    )

            if not houve_troca_no_passo:
                steps.append(
                    {
                        "type": "early_finish",
                        "content": self.create_step_content(
                            "üéâ Nenhuma troca neste passo! Array est√° ordenado.",
                            array,
                            -1,
                            -1,
                            comparisons,
                            swaps,
                        ),
                    }
                )
                break

        # Resultado final
        steps.append(
            {
                "type": "final",
                "content": self.create_step_content(
                    f"üéâ ORDENA√á√ÉO CONCLU√çDA!\n\n"
                    f"Array final: {array}\n\n"
                    f"üìä Estat√≠sticas:\n"
                    f"  ‚Ä¢ Compara√ß√µes: {comparisons}\n"
                    f"  ‚Ä¢ Trocas: {swaps}\n"
                    f"  ‚Ä¢ Complexidade: O(n¬≤) = O({length}¬≤) = {length**2}",
                    array,
                    -1,
                    -1,
                    comparisons,
                    swaps,
                ),
            }
        )

        return steps

    def create_step_content(
        self,
        description: str,
        array: List[int],
        highlight1: int = -1,
        highlight2: int = -1,
        comparisons: int = 0,
        swaps: int = 0,
        swapped: bool = False,
    ) -> str:
        """Cria o conte√∫do visual de um passo"""
        content = f"{description}\n\n"

        # Array visual
        visual_array = []
        for i, val in enumerate(array):
            if i == highlight1:
                if swapped:
                    visual_array.append(f"[green on white] {val} [/]")
                else:
                    visual_array.append(f"[magenta on white] {val} [/]")
            elif i == highlight2:
                if swapped:
                    visual_array.append(f"[green on white] {val} [/]")
                else:
                    visual_array.append(f"[cyan on white] {val} [/]")
            else:
                visual_array.append(f"[white] {val} [/]")

        content += f"Array: {' '.join(visual_array)}\n\n"
        content += f"üìä Compara√ß√µes: {comparisons} | Trocas: {swaps}"

        return content

    def run(self):
        """Executa a TUI"""
        self.selected_panel = "algorithms"

        console.clear()
        console.print(
            "[bold cyan]üöÄ RichSort - Visualizador de Algoritmos de Ordena√ß√£o[/]"
        )
        console.print("[dim]Vers√£o TUI simplificada[/]\n")

        while True:
            # Mostra o estado atual
            console.print("‚îÄ" * 80)
            console.print(
                f"[bold]Algoritmo selecionado:[/] {self.algorithms[self.selected_algorithm]['name']}"
            )
            console.print(
                f"[bold]Caso de teste selecionado:[/] {self.test_cases[self.selected_test_case]['name']}"
            )
            console.print(
                f"[dim]Array: {self.test_cases[self.selected_test_case]['array']}[/]"
            )
            console.print("‚îÄ" * 80)

            # Menu de op√ß√µes
            console.print("\n[bold cyan]Op√ß√µes:[/]")
            console.print("1. Mudar algoritmo")
            console.print("2. Mudar caso de teste")
            console.print("3. Executar algoritmo")
            console.print("4. Sair")

            choice = input("\nSua escolha (1-4): ").strip()

            if choice == "1":
                self.select_algorithm()
            elif choice == "2":
                self.select_test_case()
            elif choice == "3":
                self.execute_algorithm()
            elif choice == "4":
                console.print("[bold green]üëã Obrigado por usar o RichSort![/]")
                break
            else:
                console.print("[red]Op√ß√£o inv√°lida![/]")

            console.clear()

    def select_algorithm(self):
        """Permite selecionar um algoritmo"""
        console.print("\n[bold cyan]Algoritmos dispon√≠veis:[/]")
        for i, algo in enumerate(self.algorithms):
            status = "‚úÖ" if algo["implemented"] else "üöß"
            marker = "‚ñ∫" if i == self.selected_algorithm else " "
            console.print(f"{marker} {i + 1}. {status} {algo['name']}")

        try:
            choice = int(input("\nEscolha um algoritmo (n√∫mero): ")) - 1
            if 0 <= choice < len(self.algorithms):
                if self.algorithms[choice]["implemented"]:
                    self.selected_algorithm = choice
                    console.print(
                        f"[green]‚úÖ Algoritmo selecionado: {self.algorithms[choice]['name']}[/]"
                    )
                else:
                    console.print(
                        "[yellow]‚ö†Ô∏è Este algoritmo ainda n√£o foi implementado![/]"
                    )
            else:
                console.print("[red]Op√ß√£o inv√°lida![/]")
        except ValueError:
            console.print("[red]Por favor, digite um n√∫mero v√°lido![/]")

        input("\nPressione Enter para continuar...")

    def select_test_case(self):
        """Permite selecionar um caso de teste"""
        console.print("\n[bold cyan]Casos de teste dispon√≠veis:[/]")
        for i, test_case in enumerate(self.test_cases):
            marker = "‚ñ∫" if i == self.selected_test_case else " "
            console.print(f"{marker} {i + 1}. {test_case['name']}")
            console.print(f"   {test_case['description']}")
            console.print(f"   Array: {test_case['array']}\n")

        try:
            choice = int(input("Escolha um caso de teste (n√∫mero): ")) - 1
            if 0 <= choice < len(self.test_cases):
                self.selected_test_case = choice
                console.print(
                    f"[green]‚úÖ Caso selecionado: {self.test_cases[choice]['name']}[/]"
                )
            else:
                console.print("[red]Op√ß√£o inv√°lida![/]")
        except ValueError:
            console.print("[red]Por favor, digite um n√∫mero v√°lido![/]")

        input("\nPressione Enter para continuar...")

    def execute_algorithm(self):
        """Executa o algoritmo selecionado"""
        if not self.algorithms[self.selected_algorithm]["implemented"]:
            console.print("[red]Este algoritmo ainda n√£o foi implementado![/]")
            input("Pressione Enter para continuar...")
            return

        console.clear()
        console.rule(
            f"üöÄ Executando {self.algorithms[self.selected_algorithm]['name']}"
        )
        console.print(
            f"[yellow]Caso de teste:[/] {self.test_cases[self.selected_test_case]['name']}"
        )
        console.print(
            f"[yellow]Array inicial:[/] {self.test_cases[self.selected_test_case]['array']}\n"
        )

        # Executa o bubble sort com visualiza√ß√£o
        bubble_sort(self.test_cases[self.selected_test_case]["array"])

        input("\n\nPressione Enter para voltar ao menu principal...")


def bubble_sort(input_array: list[int]) -> list[int]:
    """
    Bubble Sort - O algoritmo de ordena√ß√£o mais simples!

    Como funciona:
    1. Compara elementos adjacentes
    2. Troca se estiverem fora de ordem
    3. Repete at√© que nenhuma troca seja necess√°ria

    Complexidade: O(n¬≤) no pior caso
    """

    # Copiando o array para n√£o alterar o array original
    array = input_array.copy()

    # Tamanho total:
    length = len(array)

    # Estat√≠sticas para fins did√°ticos
    comparisons = 0
    swaps = 0

    # Cabe√ßalho explicativo
    explanation = Panel(
        "[bold cyan]ü´ß BUBBLE SORT[/]\n\n"
        "[white]O Bubble Sort compara elementos adjacentes e os troca se estiverem\n"
        "fora de ordem. Como as bolhas que sobem na √°gua, os elementos\n"
        "maiores 'borbulham' para o final da lista.[/]\n\n"
        f"[yellow]üìä Array inicial: {input_array}[/]\n"
        f"[yellow]üìè Tamanho: {length} elementos[/]",
        title="üéØ Algoritmo de Ordena√ß√£o",
        border_style="blue",
    )
    console.print(explanation)
    console.print(f"Ordenando {array}...")

    # Itera√ß√£o externa:
    for step in range(length):
        console.print(
            f"\n[bold blue]üîÑ PASSO {step + 1}/{length}[/] - Estado atual: {array}"
        )
        if step == 0:
            console.print(
                "[dim]üí° A cada passo, o maior elemento restante ir√° para sua posi√ß√£o final[/]"
            )

        # Flag para detectar se houve trocas neste passo
        houve_troca_no_passo = False

        # Itera√ß√£o interna (at√© o pen√∫ltimo elemento N√ÉO ordenado):
        for index in range(length - step - 1):
            # Elemento a ser analisado:
            elemento = array[index]
            comparisons += 1

            console.print(
                f"\n\t\t[white]üîç Comparando {elemento} (pos: {index}) com seu vizinho...[/]"
            )
            visual_array = [
                (
                    f"[magenta on white]{array[i]}[/]"
                    if i == index
                    else (
                        f"[cyan on white]{array[i]}[/]"
                        if i == index + 1
                        else (
                            f"[dim]{array[i]}[/]"
                            if i >= length - step
                            else f"[white]{array[i]}[/]"
                        )
                    )
                )
                for i in range(length)
            ]
            console.print(f"\t\t\tArray: {visual_array}")
            if step > 0:
                console.print(
                    f"\t\t\t[dim]√öltimos {step} elementos j√° est√£o ordenados ‚úÖ[/]"
                )

            # Vizinho a ser comparado:
            index_vizinho = index + 1
            vizinho = array[index_vizinho]

            # Compara√ß√£o
            trocou = False
            if elemento > vizinho:
                array[index], array[index + 1] = array[index + 1], array[index]
                swaps += 1
                trocou = True
                houve_troca_no_passo = True
                console.print(f"\t\t\t[green]‚úÖ {elemento} > {vizinho} ‚Üí TROCAR![/]")
            else:
                console.print(f"\t\t\t[red]‚ùå {elemento} ‚â§ {vizinho} ‚Üí n√£o trocar[/]")

            # Array ap√≥s itera√ß√£o interna:
            visual_array = []
            for i in range(length):
                if trocou and i == index:
                    cor = "green on white"
                elif trocou and i == index_vizinho:
                    cor = "green on white"
                elif i >= length - step:
                    cor = "dim"
                else:
                    cor = "white"

                visual_array.append(f"[{cor}]{array[i]}[/]")
            console.print(f"\t\t\tResultado: {visual_array}")

        if not houve_troca_no_passo:
            console.print(
                f"\n\t[yellow]üéâ Nenhuma troca neste passo! Array pode estar ordenado.[/]"
            )

        # # Otimiza√ß√£o: se n√£o houve trocas, o array j√° est√° ordenado
        # if not houve_troca_no_passo:
        #     if verbose:
        #         console.print(
        #             f"[bold green]‚ú® Array ordenado antes do tempo! Paramos aqui.[/]"
        #         )
        #     break

    # Resultado:
    console.print()
    summary = Panel(
        f"[bold green]üéâ ORDENA√á√ÉO CONCLU√çDA![/]\n\n"
        f"[white]Array final: [bold cyan]{array}[/][/]\n\n"
        f"[white]üìä Estat√≠sticas:[/]\n"
        f"[white]  ‚Ä¢ Compara√ß√µes: [yellow]{comparisons}[/][/]\n"
        f"[white]  ‚Ä¢ Trocas realizadas: [yellow]{swaps}[/][/]\n",
        title="üìà Relat√≥rio Final",
        border_style="green",
    )
    console.print(summary)

    return array


if __name__ == "__main__":
    try:
        tui = SortTUI()
        tui.run()
    except KeyboardInterrupt:
        console.print("\n[bold green]üëã Obrigado por usar o RichSort![/]")
        sys.exit(0)
